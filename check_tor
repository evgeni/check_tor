#!/usr/bin/perl

# Copyright (c) 2014, Evgeni Golov
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice, this
#   list of conditions and the following disclaimer in the documentation and/or
#   other materials provided with the distribution.
#
# * Neither the name of the {organization} nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

use strict;
use warnings;
use IO::Socket::SSL;
use LWP;
use Nagios::Plugin;

my $np = Nagios::Plugin->new(
    usage => "Usage: %s [ -H|--hostname=<hostname>] "
      . "[ -d|--dirport=<port> ] "
      . "[ -p|--orport=<port> ] "
      . "[ -s|--socksport=<port> ] ",
    shortname => 'Check a running Tor node',
    url       => 'https://github.com/evgeni/check_tor',
    version   => '0.1',
    license   => 'This plugin is free software, and comes with ABSOLUTELY
NO WARRANTY. It may be used, redistributed and/or modified under
the terms of the BSD 3-clause license.',
);

$np->add_arg(
    spec    => 'hostname|H=s',
    help    => 'Hostname of the Tor node (default: %s)',
    default => 'localhost',
);

$np->add_arg(
    spec => 'dirport|d:9030',
    help =>
'Check the Tor directory server (port 9030 will be used, unless you pass a different one)',
);

$np->add_arg(
    spec => 'orport|o:9001',
    help =>
'Check the Tor onion-router relay (port 9001 will be used, unless you pass a different one)',
);

$np->add_arg(
    spec => 'socksport|s:9050',
    help =>
'Check the Tor SOCKS proxy (port 9050 will be used, unless you pass a different one)',
);

$np->add_arg(
    spec    => 'socksurl|u=s',
    help    => 'URL for testing the SOCKS proxy (default: %s)',
    default => 'http://www.google.com/robots.txt',
);

$np->add_arg(
    spec    => 'sockettimeout|T=i',
    help    => 'Timeout (in seconds) for opened connections (default: %s)',
    default => 2,
);

$np->getopts;

if ( !$np->opts->dirport && !$np->opts->orport && !$np->opts->socksport ) {
    $np->nagios_exit( 'UNKNOWN',
        'No check specified, please pass -d, -o or -s.' );
}

my $ua = new LWP::UserAgent;
$ua->timeout( $np->opts->sockettimeout );

if ( $np->opts->dirport ) {
    my $dirurl = sprintf( 'http://%s:%d/tor/keys/all.z',
        $np->opts->hostname, $np->opts->dirport );

    my $response = $ua->get($dirurl);

    if ( !$response->is_success ) {
        $np->add_message( CRITICAL,
                "DirPort not available at "
              . $np->opts->hostname . ":"
              . $np->opts->dirport . " ("
              . $response->code . ": "
              . $response->status_line . ")"
              . "\n" );
    }
    else {
        $np->add_message( OK,
                "DirPort available at "
              . $np->opts->hostname . ":"
              . $np->opts->dirport
              . "\n" );
    }
}

if ( $np->opts->orport ) {
    my $orsocket = IO::Socket::SSL->new(
        PeerAddr        => $np->opts->hostname,
        PeerPort        => $np->opts->orport,
        SSL_verify_mode => 0x00,
        Timeout         => $np->opts->sockettimeout,
    );
    if ( !$orsocket ) {
        $np->add_message( CRITICAL,
                "ORPort not available at "
              . $np->opts->hostname . ":"
              . $np->opts->orport . " ("
              . $! . ": "
              . $SSL_ERROR . ")"
              . "\n" );
    }
    else {
        $np->add_message( OK,
                "ORPort available at "
              . $np->opts->hostname . ":"
              . $np->opts->orport
              . "\n" );
    }
}

if ( $np->opts->socksport ) {
    my $socksproxy =
      'socks://' . $np->opts->hostname . ":" . $np->opts->socksport;
    $ua->proxy( [qw(http https)] => $socksproxy );
    my $response = $ua->get( $np->opts->socksurl );

    if ( !$response->is_success ) {
        $np->add_message( CRITICAL,
                "SocksPort not available at "
              . $np->opts->hostname . ":"
              . $np->opts->socksport . " ("
              . $response->code . ": "
              . $response->status_line . ")"
              . "\n" );
    }
    else {
        $np->add_message( OK,
                "SocksPort available at "
              . $np->opts->hostname . ":"
              . $np->opts->socksport
              . "\n" );
    }
}

my $code;
my $message;
( $code, $message ) = $np->check_messages;

$np->nagios_exit( $code, $message );
